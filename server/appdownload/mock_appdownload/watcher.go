// Code generated by MockGen. DO NOT EDIT.
// Source: watcher.go

// Package mock_appdownload is a generated GoMock package.
package mock_appdownload

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	appdownload "realtimedashboard/appdownload"
	reflect "reflect"
)

// MockDatabaseWatchHandler is a mock of DatabaseWatchHandler interface
type MockDatabaseWatchHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseWatchHandlerMockRecorder
}

// MockDatabaseWatchHandlerMockRecorder is the mock recorder for MockDatabaseWatchHandler
type MockDatabaseWatchHandlerMockRecorder struct {
	mock *MockDatabaseWatchHandler
}

// NewMockDatabaseWatchHandler creates a new mock instance
func NewMockDatabaseWatchHandler(ctrl *gomock.Controller) *MockDatabaseWatchHandler {
	mock := &MockDatabaseWatchHandler{ctrl: ctrl}
	mock.recorder = &MockDatabaseWatchHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseWatchHandler) EXPECT() *MockDatabaseWatchHandlerMockRecorder {
	return m.recorder
}

// RegisterObserver mocks base method
func (m *MockDatabaseWatchHandler) RegisterObserver(arg0 appdownload.Observer) uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterObserver", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// RegisterObserver indicates an expected call of RegisterObserver
func (mr *MockDatabaseWatchHandlerMockRecorder) RegisterObserver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterObserver", reflect.TypeOf((*MockDatabaseWatchHandler)(nil).RegisterObserver), arg0)
}

// UnregisterObserver mocks base method
func (m *MockDatabaseWatchHandler) UnregisterObserver(u uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterObserver", u)
}

// UnregisterObserver indicates an expected call of UnregisterObserver
func (mr *MockDatabaseWatchHandlerMockRecorder) UnregisterObserver(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterObserver", reflect.TypeOf((*MockDatabaseWatchHandler)(nil).UnregisterObserver), u)
}

// WatchAppDownloads mocks base method
func (m *MockDatabaseWatchHandler) WatchAppDownloads() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatchAppDownloads")
}

// WatchAppDownloads indicates an expected call of WatchAppDownloads
func (mr *MockDatabaseWatchHandlerMockRecorder) WatchAppDownloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAppDownloads", reflect.TypeOf((*MockDatabaseWatchHandler)(nil).WatchAppDownloads))
}

// MockObserver is a mock of Observer interface
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
}

// MockObserverMockRecorder is the mock recorder for MockObserver
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return m.recorder
}

// OnNewAppDownload mocks base method
func (m *MockObserver) OnNewAppDownload(arg0 appdownload.AppDownload) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNewAppDownload", arg0)
}

// OnNewAppDownload indicates an expected call of OnNewAppDownload
func (mr *MockObserverMockRecorder) OnNewAppDownload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewAppDownload", reflect.TypeOf((*MockObserver)(nil).OnNewAppDownload), arg0)
}
