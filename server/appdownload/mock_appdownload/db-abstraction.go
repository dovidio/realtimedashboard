// Code generated by MockGen. DO NOT EDIT.
// Source: db-abstraction.go

// Package mock_appdownload is a generated GoMock package.
package mock_appdownload

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	db "realtimedashboard/db"
	reflect "reflect"
)

// MockDatabaseHelper is a mock of DatabaseHelper interface
type MockDatabaseHelper struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseHelperMockRecorder
}

// MockDatabaseHelperMockRecorder is the mock recorder for MockDatabaseHelper
type MockDatabaseHelperMockRecorder struct {
	mock *MockDatabaseHelper
}

// NewMockDatabaseHelper creates a new mock instance
func NewMockDatabaseHelper(ctrl *gomock.Controller) *MockDatabaseHelper {
	mock := &MockDatabaseHelper{ctrl: ctrl}
	mock.recorder = &MockDatabaseHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseHelper) EXPECT() *MockDatabaseHelperMockRecorder {
	return m.recorder
}

// Collection mocks base method
func (m *MockDatabaseHelper) Collection(name string) db.CollectionHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", name)
	ret0, _ := ret[0].(db.CollectionHelper)
	return ret0
}

// Collection indicates an expected call of Collection
func (mr *MockDatabaseHelperMockRecorder) Collection(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDatabaseHelper)(nil).Collection), name)
}

// MockCollectionHelper is a mock of CollectionHelper interface
type MockCollectionHelper struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionHelperMockRecorder
}

// MockCollectionHelperMockRecorder is the mock recorder for MockCollectionHelper
type MockCollectionHelperMockRecorder struct {
	mock *MockCollectionHelper
}

// NewMockCollectionHelper creates a new mock instance
func NewMockCollectionHelper(ctrl *gomock.Controller) *MockCollectionHelper {
	mock := &MockCollectionHelper{ctrl: ctrl}
	mock.recorder = &MockCollectionHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCollectionHelper) EXPECT() *MockCollectionHelperMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockCollectionHelper) Find(arg0 context.Context, arg1 interface{}) (db.MultiResultHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(db.MultiResultHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockCollectionHelperMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCollectionHelper)(nil).Find), arg0, arg1)
}

// InsertOne mocks base method
func (m *MockCollectionHelper) InsertOne(arg0 context.Context, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne
func (mr *MockCollectionHelperMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockCollectionHelper)(nil).InsertOne), arg0, arg1)
}

// Watch mocks base method
func (m *MockCollectionHelper) Watch(arg0 context.Context, arg1 mongo.Pipeline, arg2 *options.ChangeStreamOptions) (db.MultiResultHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.MultiResultHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockCollectionHelperMockRecorder) Watch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockCollectionHelper)(nil).Watch), arg0, arg1, arg2)
}

// MockMultiResultHelper is a mock of MultiResultHelper interface
type MockMultiResultHelper struct {
	ctrl     *gomock.Controller
	recorder *MockMultiResultHelperMockRecorder
}

// MockMultiResultHelperMockRecorder is the mock recorder for MockMultiResultHelper
type MockMultiResultHelperMockRecorder struct {
	mock *MockMultiResultHelper
}

// NewMockMultiResultHelper creates a new mock instance
func NewMockMultiResultHelper(ctrl *gomock.Controller) *MockMultiResultHelper {
	mock := &MockMultiResultHelper{ctrl: ctrl}
	mock.recorder = &MockMultiResultHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMultiResultHelper) EXPECT() *MockMultiResultHelperMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockMultiResultHelper) Next(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockMultiResultHelperMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockMultiResultHelper)(nil).Next), arg0)
}

// Decode mocks base method
func (m *MockMultiResultHelper) Decode(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode
func (mr *MockMultiResultHelperMockRecorder) Decode(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockMultiResultHelper)(nil).Decode), v)
}

// MockClientHelper is a mock of ClientHelper interface
type MockClientHelper struct {
	ctrl     *gomock.Controller
	recorder *MockClientHelperMockRecorder
}

// MockClientHelperMockRecorder is the mock recorder for MockClientHelper
type MockClientHelperMockRecorder struct {
	mock *MockClientHelper
}

// NewMockClientHelper creates a new mock instance
func NewMockClientHelper(ctrl *gomock.Controller) *MockClientHelper {
	mock := &MockClientHelper{ctrl: ctrl}
	mock.recorder = &MockClientHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientHelper) EXPECT() *MockClientHelperMockRecorder {
	return m.recorder
}

// Database mocks base method
func (m *MockClientHelper) Database(arg0 string) db.DatabaseHelper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database", arg0)
	ret0, _ := ret[0].(db.DatabaseHelper)
	return ret0
}

// Database indicates an expected call of Database
func (mr *MockClientHelperMockRecorder) Database(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClientHelper)(nil).Database), arg0)
}

// StartSession mocks base method
func (m *MockClientHelper) StartSession() (mongo.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession")
	ret0, _ := ret[0].(mongo.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession
func (mr *MockClientHelperMockRecorder) StartSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockClientHelper)(nil).StartSession))
}
